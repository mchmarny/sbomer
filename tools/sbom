#!/bin/bash

set -eo pipefail

img=$1

# input validation
[ -z "$img" ] && echo "arg img not provided\n" && exit 1

# dependencies
trivy=$(which trivy) || ( echo "trivy not installed" && exit 1 )
syft=$(which syft) || ( echo "syft not installed" && exit 1 )

# constants
sbom_dir="data"
mkdir -p $sbom_dir
report_dir="report"
mkdir -p $report_dir

# clean_name replaces any non-alphanumeric characters with an underscore.
clean_name () {
	echo $1 | sed -e 's/[^A-Za-z0-9._-]/_/g'
}

# make_report scores sbom or removes the file if it is empty.
make_report () {
	sbom=$1
	if [ -f "${sbom}" ];then
		if [ -s "${sbom}" ];then
			./sbom-scorecard score $sbom \
				--outputFormat json > "${report_dir}/$(basename ${sbom})"
		else
			rm -f $sbom
		fi
	else
		echo "${sbom} not found"
	fi
}

# sbom_trivy generates a sbom for the given image.
# on error, trivy returns a non-zero exit code, which is ignored.
sbom_trivy () {
	img=$1
	name=$(clean_name $img)
	
	declare -a formats=(
		"spdx-json"
		"cyclonedx"
	)

	for f in "${formats[@]}"
	do
		report="${sbom_dir}/${name}-${f}-trivy.json"
		trivy image -q --format "$f" --list-all-pkgs -o "$report" "$img" || true
		make_report $report
	done
}

# sbom_syft generates a Software Bill of Materials (SBOM) for the given image.
# on error, syft returns a non-zero exit code, which is ignored.
sbom_syft () {
	img=$1
	name=$(clean_name $img)

	declare -a formats=(
		"spdx-json"
		"cyclonedx-json"
	)

	for f in "${formats[@]}"
	do
		report="${sbom_dir}/${name}-${f}-syft.json"
		syft packages "$img" -q -o "$f" --file "$report" || true
		make_report $report
	done
}

# main
sbom_trivy $img
sbom_syft $img