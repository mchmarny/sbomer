#!/bin/bash

set -eo pipefail

img=$1

# input validation
[ -z "$img" ] && echo "arg img not provided\n" && exit 1

# dependencies
syft=$(which syft) || ( echo "syft not installed" && exit 1 )
grype=$(which grype) || ( echo "grype not installed" && exit 1 )

# constants
data_dir="data"
rm -rf $data_dir
mkdir -p $data_dir

# clean_name replaces any non-alphanumeric characters with an underscore.
clean_name () {
	echo $1 | sed -e 's/[^A-Za-z0-9._-]/-/g'
}

# check_file makes sure it's not empty.
check_file () {
	f=$1
	if [ -f "${f}" ];then
		if [ -s "${f}" ];then
			echo $f
		else
			rm -f $f
		fi
	else
		echo "${f} not found"
	fi
}

# gen_vuln generates vulnerability report for the given image.
gen_vuln () {
	img=$1
	name=$(clean_name $img)
	
	file="${data_dir}/vuln-${name}.json"
	grype -q --add-cpes-if-none -s AllLayers -o json --file "$file" "$img" || true
	check_file $file
}

# gen_sbom generates a SBOM for the given image.
gen_sbom () {
	img=$1
	name=$(clean_name $img)

	file="${data_dir}/sbom-${name}.json"
	syft packages -q -o spdx-json --file "$file" "$img" || true
	check_file $file
}

# main
gen_sbom $img
gen_vuln $img